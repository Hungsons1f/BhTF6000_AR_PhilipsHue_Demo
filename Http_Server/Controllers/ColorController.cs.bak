using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.IO;
using TwinCAT.Ads;
using Newtonsoft.Json;

namespace Http_Server.Controllers
{
    public class ColorController : ApiController
    {
        private TcAdsClient adsClient;

        //Control Variables
        private int hbPut;
        private int hbGet;
        private int hbExecute;

        //Handlers and buffers
        struct WriteHandler
        {
            public int hnwSat;
            public int hnwBri;
            public int hnwHue;
            public int hnwTrans;
        }
        private WriteHandler writeHandler;

        struct ReadHandler
        {
            public int hnrSat;
            public int hnrBri;
            public int hnrHue;
            public int hnrTrans;
        }
        private ReadHandler readHandler;

        struct ReadVar
        {
            public volatile byte nrSat;
            public volatile byte nrBri;
            public volatile ushort nrHue;
            public volatile ushort nrTrans;
        }
        private ReadVar readVar;

        //Event signal
        private volatile int signal = 0;




        public ColorController()
        {
            try
            {
                //Initiate and connect to ADS
                adsClient = new TcAdsClient();
                adsClient.Connect("5.57.169.90.1.1", 851);

                //Create variable handlers for writevar
                hbPut = adsClient.CreateVariableHandle("MAIN.bPut");
                hbGet = adsClient.CreateVariableHandle("MAIN.bGet");
                hbExecute = adsClient.CreateVariableHandle("MAIN.bExecute");
                writeHandler.hnwBri = adsClient.CreateVariableHandle("MAIN.nwBri");
                writeHandler.hnwSat = adsClient.CreateVariableHandle("MAIN.nwSat");
                writeHandler.hnwHue = adsClient.CreateVariableHandle("MAIN.nwHue");
                writeHandler.hnwTrans = adsClient.CreateVariableHandle("MAIN.nwTrans");

                //Create event handlers for readvar
                readHandler.hnrBri = adsClient.AddDeviceNotificationEx("Main.nrBri", AdsTransMode.OnChange, 200, 0, null, typeof(byte));
                readHandler.hnrSat = adsClient.AddDeviceNotificationEx("Main.nrSat", AdsTransMode.OnChange, 200, 0, null, typeof(byte));
                readHandler.hnrHue = adsClient.AddDeviceNotificationEx("Main.nrHue", AdsTransMode.OnChange, 200, 0, null, typeof(ushort));
                readHandler.hnrTrans = adsClient.AddDeviceNotificationEx("Main.nrTrans", AdsTransMode.OnChange, 200, 0, null, typeof(ushort));
                adsClient.AdsNotificationEx += AdsClient_AdsNotificationEx;

                //Readvar buffer
                readVar = new ReadVar();

                adsClient.WriteAny(hbExecute, true);
                adsClient.WriteAny(hbGet, true);
            }
            catch (Exception err)
            {
                throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.InternalServerError) { Content = new StringContent("ADS client cannot be initiated! Detail: " + err.ToString()) });
            }
            finally
            {
                try
                {
                    adsClient.DeleteDeviceNotification(readHandler.hnrBri);
                    adsClient.DeleteDeviceNotification(readHandler.hnrSat);
                    adsClient.DeleteDeviceNotification(readHandler.hnrHue);
                    adsClient.DeleteDeviceNotification(readHandler.hnrTrans);
                    adsClient.AdsNotificationEx -= AdsClient_AdsNotificationEx;
                }
                catch (Exception err)
                {
                    throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.InternalServerError) { Content = new StringContent("ADS client cannot be disposed! Detail: " + err.ToString()) });
                }
            }
        }

        private void AdsClient_AdsNotificationEx(object sender, AdsNotificationExEventArgs e)
        {
            if (e.NotificationHandle == readHandler.hnrBri)
            {
                readVar.nrBri = (byte)e.Value;
                signal++;
            }
            if (e.NotificationHandle == readHandler.hnrSat)
            {
                readVar.nrSat = (byte)e.Value;
                signal++;
            }
            if (e.NotificationHandle == readHandler.hnrHue)
            {
                readVar.nrHue = (ushort)e.Value;
                signal++;
            }
            if (e.NotificationHandle == readHandler.hnrTrans)
            {
                readVar.nrTrans = (ushort)e.Value;
                signal++;
            }
        }

        protected override void Dispose(bool disposing)
        {
            try
            {
                adsClient.DeleteVariableHandle(writeHandler.hnwBri);
                adsClient.DeleteVariableHandle(writeHandler.hnwSat);
                adsClient.DeleteVariableHandle(writeHandler.hnwHue);
                adsClient.DeleteVariableHandle(writeHandler.hnwTrans);
                adsClient.DeleteVariableHandle(hbPut);
                adsClient.DeleteVariableHandle(hbGet);
                adsClient.DeleteVariableHandle(hbExecute);

                //adsClient.DeleteDeviceNotification(readHandler.hnrBri);
                //adsClient.DeleteDeviceNotification(readHandler.hnrSat);
                //adsClient.DeleteDeviceNotification(readHandler.hnrHue);
                //adsClient.DeleteDeviceNotification(readHandler.hnrTrans);
                //adsClient.AdsNotificationEx -= AdsClient_AdsNotificationEx;
                adsClient.Dispose();
            }
            catch (Exception err)
            {
                throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.InternalServerError) { Content = new StringContent("ADS client cannot be disposed! Detail: " + err.ToString()) });
            }
            base.Dispose(disposing);
        }


        //GET api/values
        public HttpResponseMessage Get()
        {
            try
            {
                signal = 0;
                //adsClient.WriteAny(hbExecute, true);
                //adsClient.WriteAny(hbGet, true);

                //long reftime = DateTime.Now.Ticks;
                //long now = reftime;
                //while ((signal < 4))// && (now <= (reftime + 30000000)))
                //{
                //    now = DateTime.Now.Ticks;
                //}

                //if (now > (reftime + 30000000))
                //{
                //    return Request.CreateResponse(HttpStatusCode.GatewayTimeout, "ADS server response timeout!");
                //}
                //else
                {
                    return Request.CreateResponse(HttpStatusCode.OK, JsonConvert.SerializeObject(new { bri = readVar.nrBri, sat = readVar.nrSat, hue = readVar.nrHue, transition = readVar.nrTrans }));
                }
            }
            catch (Exception err)
            {
                //throw new HttpResponseException (Request.CreateResponse(HttpStatusCode.InternalServerError, "Error! " + err.ToString()));
                return Request.CreateResponse(HttpStatusCode.InternalServerError, "Error! " + err.ToString());
            }
        }

        // PUT api/values/5
        public HttpResponseMessage Put([FromUri]ushort hue = 1, [FromUri]byte sat = 254, [FromUri]byte bri = 140, [FromUri]ushort transition = 1 )
        {
            try
            {
                adsClient.WriteAny(hbExecute, true);
                adsClient.WriteAny(writeHandler.hnwBri, bri);
                adsClient.WriteAny(writeHandler.hnwSat, sat);
                adsClient.WriteAny(writeHandler.hnwHue, hue);
                adsClient.WriteAny(writeHandler.hnwTrans, transition);
                adsClient.WriteAny(hbPut, true);
                return Request.CreateResponse(HttpStatusCode.OK, JsonConvert.SerializeObject(new { bri = bri, sat = sat, hue = hue, transition = transition }));
            }
            catch (Exception err)
            {
                return Request.CreateResponse(HttpStatusCode.InternalServerError, "Error! " + err.ToString());
            }
        }
    }
}
